---

name: Тип Void
theory: |

  `void` указывается как возврат для функций, которые ничего не возвращают. Он автоматически выводится в том случае, когда внутри функции нет инструкции `return` или она пустая:

  ```typescript
  function noop() {
    // внутри пусто
  }
  ```

  В JavaScript подобные функции возвращают `undefined`, но в TypeScript `void` и `undefined` это разные вещи. Различие проявляется в контекстной типизации и появилось исходя из особенностей работы самого JavaScript. Самый яркий пример метод `forEach()`.

  Принцип работы метода `forEach()` подразумевает то, что он никак не использует данные возвращаемые переданным колбеком, который вызывается внутри. Кажется, что логично было бы определить возврат как `undefined`, но посмотрите на пример:

  ```typescript
  const numbers = [1, 2, 3];
  const result = [];

  numbers.forEach((n) => result.push(n));
  ```

  Метод `push()` возвращает индекс добавленного элемента. Если бы `forEach()` требовал от колбека возврат `undefined`, то такой код бы привел к ошибке компиляции. Его пришлось бы переписать, например, так:

  ```typescript
  // Теперь колбек ничего не возвращает,
  // соответственно результат вызова undefined
  numbers.forEach((n) => {
    result.push(n);
  });
  ```

  Чтобы не создавать такой код и был введен `void`. `void` позволяет возвращать любые данные, но делает так, что их использование бессмысленно.

  ```typescript
  type VoidFunc = () => void;

  // Тип функции определяется через контекст
  // присваивания ее переменной с типом VoidFunc
  const f: VoidFunc = () => true;

  const v = f();
  ```

  Единственная ситуация, когда указание `void` явно запрещает возврат из функции это определение функции вне контекста использования, когда ее тип указывается явно:

  ```typescript
  function foo(): void {
    return true; // Error!
  }

  const bar = function(): void {
    return true; // Error!
  };
  ```

  Стоит также иметь в виду, что `void` также оператор JavaScript и не запутаться с ним. Он вычисляет выражение следующее за ним и возвращает `undefined`:
  ```typescript
  void 10 === undefined // true
  ```

instructions: |

  Попробуйте самостоятельно определить функцию `forEach()` для чисел:

  ```typescript
  forEach([1, 2, 3], (n) => console.log(n));
  // 1
  // 2
  // 3

  const result = [];
  forEach([1, 2, 3], (n) => result.push(n));
  // [1, 2, 3]
  ```

  Параметры функции:

  1. Массив чисел
  2. Анонимная функция, принимающая на вход число и возвращающая `void`. У этой функции есть необязательный параметр - индекс элемента в массиве.

  ```typescript
  forEach([8, 9], (n, index) => console.log(index + n));
  // 8
  // 10
  ```

# tips:
