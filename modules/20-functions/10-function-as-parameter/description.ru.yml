---

name: Функции как параметры
theory: |

  В TypeScript используется несколько способов типизировать функции передаваемые как параметры. Самый простой - использовать тип `Function`. Он описывает собой функцию JavaScript со всеми ее особенностями включая свойства `bind`, `call` и `apply`.

  ```typescript
  function process(callback: Function) {
    const value = callback();
    // ...
  }
  ```

  Несмотря на простоту и удобство, `Function` отключает проверку типов для вызываемой функции. Никак не проверяется количество и тип входных аргументов, а результатом работы такой функции будет `any`. В общем случае `Function` стоит избегать.

  ```typescript
  // Сработает, хотя по смыслу не должно
  // Внутри Math.round вызовется без аргументов
  process(Math.round);
  ```

  Другой способ описывать функции - использовать стрелочную функцию с указанием входных и выходных типов.

  ```typescript
  function process(callback: () => string) {
    // value имеет тип string
    const value = callback();
    // ...
  }

  process(Math.round);
  // Argument of type '(x: number) => number' is not
  // assignable to parameter of type '() => string'.
  ```

  Определение стрелочной функции похоже на настоящую, но тут важно не перепутать. Здесь мы видим именно описание типа, а не определение функции. Еще несколько примеров для закрепления:

  ```typescript
  function process(callback: () => number)
  function process(callback: () => string[])
  function process(callback: () => { firstName: string; })
  ```

  Пример с параметрами:

  ```typescript
  function process(callback: (n: number) => string) {
    const value = callback(10);
    // ...
  }
  ```

  Если определение функции встречается часто, то для него можно создать псевдоним:

  ```typescript
  type myFunction = (n: number) => string;

  function process(callback: myFunction) {
    const value = callback(10);
    // ...
  }
  ```

instructions: |

  Реализуйте функцию `filter()`, которая принимает на вход массив чисел и предикат, который будет использоваться для проверки каждого числа, на соответствие требованиям:

  ```typescript
  const numbers = [1, -5, 2, 3, 4, 133];
  filter(numbers, (n) => n > 3); // [4, 133]
  filter(numbers, (n) => n % 2 == 0); // [2, 4]
  ```
  
  Запрещено пользоваться методом массива filter.
  Параметры функции:

  1. Массив чисел
  2. Анонимная функция, принимающая на вход число и возвращающая логическое значение

# tips:
#   - |
#     [Ruby-комьюнити](https://slack-ru.hexlet.io/)
