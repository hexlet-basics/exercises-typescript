---

name: Объектные типы (Object Types)
theory: |

  Тип объекта состоит из типов всех входящих в него свойств. Он выводится автоматически:

  ```typescript
  // Тип: { firstName: string; pointsCount: number; }
  const user = {
    firstName: 'Mike',
    pointsCount: 1000,
  };

  // Поменять тип свойств нельзя
  // Type 'number' is not assignable to type 'string'.
  user.firstName = 7;
  ```

  В отличии от JavaScript, TypeScript не позволяет обращаться к несуществующим свойствам. Это значит, что структура любого объекта должна быть задана при его инициализации.

  ```typescript
  // Property 'age' does not exist on type '{ firstName: string; pointsCount: number; }'.
  user.age = 100;
  ```

  Чтобы принять такой объект в функцию как параметр, нужно указать его структуру в описании функции:

  ```typescript
  // Свойства в описании типа разделяются через точку с запятой (;)
  function doSomething(user: { firstName: string; pointsCount: number; }) {
    // ...
  }
  ```

  Теперь внутрь можно передавать любой объект, совпадающий по свойствам:

  ```typescript
  doSomething({ firstName: 'Alice', pointsCount: 2000 });
  doSomething({ firstName: 'Bob', pointsCount: 1800 });

  // Так нельзя
  doSomething({ firstName: 'Bob' });
  // И так тоже
  doSomething({ firstName: 'Bob', pointsCount: 1800, key: 'another' });
  ```

  Как и в случае примитивных типов данных, ни null, ни undefined по умолчанию не разрешены. Чтобы изменить это поведение, нужно добавить опциональность:

  ```typescript
  // firstName может быть undefined
  // pointsCount может быть null
  function doSomething(user: { firstName?: string; pointsCount: number | null; }) {
    // ...
  }
  ```

instructions: |

  Реализуйте функцию `isComplete()`, которая принимает на вход курс и определяет завершен ли он. Завершенным считается курс, в который добавлено 4 или более уроков:

  ```typescript
  // Определите тип исходя из структуры объекта
  const course1 = {
    name: 'Java',
    lessons: ['variables', 'functions', 'conditions'],
  };
  isComplete(course1); // false
  ```

# tips:
