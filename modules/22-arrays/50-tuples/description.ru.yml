---

name: Кортежи (Tuples)
theory: |

  Обычно массивы могут менять свой размер и содержать от нуля значений. Поэтому пустой массив как значение `[]` является валидным для массивов любого типа. 
  
  При этом иногда массивы выступают в качестве упрощенной версии объекта, где количество значений и их порядок строго определены. Например с помощью такого массива можно представить точку на плоскости: `[x, y]`.

  Такие массивы нужны для экономии символов, когда приходится создавать много одинаковых данных, например, для тестирования.

  В TypeScript подобные массивы называются кортежами, с которыми мы познакомимся в этом уроке. У них есть свой синтаксис определения. Например, рассмотрим представление точки:

  ```typescript
  const point: [number, number] = [1, 3]
  // Можно поменять
  const point[0] = 4;

  // Обращение к несуществующему индексу приведет к ошибке
  point[3]; // Error!

  // Нельзя создать не совпадающий по типу
  const point2: [number, number] = [1, 'x']; // Error!
  ```
  
  <!--TODO - автору: не хватает описания кода - на что здесь нужно обратить внимание? -->
  
  Было бы логично, если бы такое же поведение применялось к `push()` или `pop()`. Ведь если мы определили кортеж из двух элементов, то элементов должно быть именно два. На практике, код ниже сработает:
  
  <!--TODO - автору: а почему было бы логично? Из чего следует такой вывод? -->

  ```typescript
  point.push(10);
  console.log(point); // [4, 3, 10];
  ```

  Вообще такого быть не должно, но [исторически так сложилось](https://stackoverflow.com/questions/64069552/typescript-array-push-method-cant-catch-a-tuple-type-of-the-array). Сейчас уже поздно, слишком много кода завязано на текущее поведение и его нельзя поменять в самом TypeScript и не нарушить обратную совместимость. Общая рекомендация состоит в том, чтобы не пытаться изменять размер кортежа.
  
  <!--TODO - автору: на сколько важна эта информация выше? Просто мы говорим о кортежах, но тут отвелклись на `push()` и `pop().-->
  
  <!--TODO - автору: Сейчас как будто бы ничего не объясняем, а только запутываем. Нужно сказать пару слов о том, почему так не должно быть, а почему так работает - почему исторически так. (очень много моментов, которые требуют пояснения и ответа на вопрос - а почему?)-->
  
  <!--TODO - автору: а почему поздно? поздно для чего? -->

  Кортежи могут состоять из элементов разных типов:

  ```typescript
  type HTTPResponse = [number, string];

  // Порядок определения важен
  const response: HTTPResponse = [404, 'Page is not found'];
  // Так не сработает ['Page is not found', 404]
  ```
  
  <!--TODO - автору: не хватает описания кода - на что здесь нужно обратить внимание? -->
  
  Часть из них может быть опциональная:

  ```typescript
  type HTTPResponse = [number, string?];

  const response1: HTTPResponse = [500];
  const response2: HTTPResponse = [201, 'Created'];
  ```
  
  <!--TODO - автору: не хватает описания кода - на что здесь нужно обратить внимание? -->
  
  Если создавать переменные для кортежей и использовать алиас, то его нужно указывать явно. Иначе с точки зрения TypeScript будет создан обычный массив:

  ```typescript
  // Будет иметь тип (string | number)[]
  const response = [201, 'Created'];
  ```
  
  <!--TODO - автору: не хватает описания кода - на что здесь нужно обратить внимание? -->

instructions: |

  Создайте и экспортируйте тип `Point`, который описывает точку в пространстве, состоящую из трех координат: x, y, z.

  Реализуйте функцию `isTheSamePoint()`, которая проверяет две точки на их одинаковое расположение. Две точки совпадают, если совпадают все их координаты:

  ```typescript
  const p1: Point = [1, 3, 4];
  const p2: Point = [1, 3, 4];
  const p3: Point = [0, 8, 4];

  isTheSamePoint(p1, p2); // true
  isTheSamePoint(p1, p3); // false
  isTheSamePoint(p2, p3); // false
  ```

# tips:
