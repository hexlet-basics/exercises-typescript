---

name: Многомерные массивы
theory: |

  В этом уроке мы рассмотрим многомерные массивы. Чтобы определить их, нужно использовать синтаксис `Type[][]`. Дословно это означает, что перед нами массив, который содержит массивы со значениями типа `Type`. Несколько примеров:

  ```typescript
  // Тип number[][] выводится автоматически
  const items1 = [[3, 8], [10, 4, 8]];

  const items2: number[][] = []
  // или так Array<number[]>

  // Используя алиас
  type User = {
    name: string;
  }

  // или так Array<User[]>
  const users: User[][] = [
    [{ name: 'Eva'}, { name: 'Adam' }],
  ];
  ```

  Добавление в такие массивы немассивов приведет к ошибке типизации:

  ```typescript
  items1.push(99); // Error: Type 'number' is not assignable
  ```
  
  <!--TODO - автору: нужно пояснить код - на что обратить внимание?-->
  
  Чтобы определить массивы составных типов, нужно использовать скобки:

  ```typescript
  const coll: (string | number)[][] = [];
  coll.push(['hexlet', 5])
  ```

  Также можно использовать синтаксис `Array<Array<Type>>`. В примере ниже массив, внутри которого находятся массивы, содержащие значения типа `Type`:

  ```typescript
  const coll: Array<Array<string | number>> = [];
  coll.push(['hexlet', 5])
  ```

  Сами массивы при этом могут быть частью объекта. Технически это позволяет создавать бесконечную вложенность из объектов и массивов:

  ```typescript
  type Course = {
    name: string;
    lessons: Lesson[];
  }

  type Lesson = {
    name: string;
    links: string[];
  }
  ```
  
  <!--TODO - автору: нужно пояснить код - на что обратить внимание?-->

instructions: |

  Реализуйте функцию `getField()`, которая генерирует игровое поле для крестиков ноликов. Функция принимает на вход размерность поля и возвращает массив массивов нужного размера, заполненный значениями `null`.

  ```typescript
  const field1 = getField(1);
  console.log(field1);
  // [[null]]

  const field2 = getField(2);
  console.log(field2);
  // [[null, null], [null, null]]
  ```


# tips:
