---
name: Аннотации типов
theory: |

  В простых случаях тип массива определяется как название типа и квадратные скобки после него: `string[]`, `number[]`, и так далее. Эта схема работает и алиасами типов:

  ```typescript
  type User = {
    name: string
  };

  // При определении констант и переменных
  const users: User[] = [];

  // В определении функций
  function foo(users: User[]) {
    // ...
  }
  ```

  Но что делать, в случае составных типов, например если мы хотим использовать объединение или описание объекта? В этом случае добавляются скобки: `(Type)[]`:

  ```typescript
  const users: ({ name: string })[] = [];
  const users: (string | null)[] = [];
  ```

  С другой стороны, TypeScript дает еще один синтаксис, который описывается так: `Array<Type>`. Он универсальный и с его помощью можно описать любой массив. Описание типа в такой записи происходит между знаками меньше и больше:

  ```typescript
  const users: Array<string> = [];
  const users: Array<number> = [];
  const users: Array<User> = [];

  const users: Array<{ name: string }> = [];
  const users: Array<string | null> = [];
  ```

  Но обычно так не делают. Там, где можно использовать более короткий вариант - используют его. Форма `Array` нужна в первую очередь для дженериков, которые рассматриваются позже.

  ## Определение пустого массива

  Если определить пустой массив без указания типа, то его типом автоматически станет `any[]`. В такой массив можно добавить любые данные, включая вложенные массивы.

  ```typescript
  const items = [];
  items.push(1);
  items.push('wow');
  items.push(['code-basics', 'hexlet']);
  ```

  Код с `any` будет работать всегда, но он выключает проверку типов. Чтобы этого не происходило, нужно всегда явно типизировать пустой массив:

  ```typescript
  const items: Array<number> = [];
  ```

  ## Утверждение типа возвращаемого значения

  `val is` в TypeScript - это утверждение типа, которое используется для указания компилятору TypeScript, что переменная val имеет определенный тип. Например:

  ```typescript
  function isString(val: any): val is string {
    return typeof val === 'string';
  }

  const x = 'Hello, world';
  if (isString(x)) {
    console.log(x.toUpperCase()); // Output: HELLO, WORLD
  }
  ```

  В этом примере функция isString принимает аргумент val с типом any и возвращает значение true, если val является строкой, и false в противном случае. Затем x объявляется как строка и передается в функцию isString. Как только утверждение типа val is string было успешно выполнено, мы можем безопасно вызывать метод toUpperCase для x.

instructions: |

  Реализуйте функцию `compact()`, очищающую массив чисел от `null` значений. Функция принимает на вход массив чисел, внутри которого могут встречаться значения `null`. Результатом работы этой функции должен быть новый массив, в котором остались только числа исходного массива.

  ```typescript
  compact([null, 9, 3, null, 8]); // [9, 3, 8]
  ```

# tips:
