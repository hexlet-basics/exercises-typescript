---
name: Аннотации типов
theory: |

  В простых случаях тип массива определяется как название типа и квадратные скобки после него, например: `string[]`, `number[]`. Эта схема работает и с алиасами типов:

  ```typescript
  type User = {
    name: string
  };

  // При определении констант и переменных
  const users: User[] = [];

  // В определении функций
  function foo(users: User[]) {
    // ...
  }
  ```
  
  <!--TODO - автору: не хватает описание кода - на что нужно обратить внимание-->
  
  В случае составных типов, например, если мы хотим использовать объединение или описание объекта, добавляются скобки — `(Type)[]`:
  
  <!--TODO - автору: добавляются круглые скобки?-->

  ```typescript
  const users: ({ name: string })[] = [];
  const users: (string | null)[] = [];
  ```

  <!--TODO - автору: не хватает описание кода - на что нужно обратить внимание-->
  
  Также TypeScript дает еще один синтаксис, который описывается так: `Array<Type>`. Он универсальный — с его помощью можно описать любой массив. Описывается тип в такой записи между знаками меньше и больше:

  ```typescript
  const users: Array<string> = [];
  const users: Array<number> = [];
  const users: Array<User> = [];

  const users: Array<{ name: string }> = [];
  const users: Array<string | null> = [];
  ```

  Но обычно так не делают. Там, где можно использовать более короткий вариант, используют его. Форма `Array` нужна в первую очередь для дженериков, которые рассмотрим позже.

  ## Определение пустого массива

  Если определить пустой массив и не указать тип, то его типом автоматически станет `any[]`. В такой массив можно добавить любые данные, включая вложенные массивы:

  ```typescript
  const items = [];
  items.push(1);
  items.push('wow');
  items.push(['code-basics', 'hexlet']);
  ```

  Код с `any` будет работать всегда, но он выключает проверку типов. Чтобы этого не происходило, нужно всегда явно типизировать пустой массив:

  ```typescript
  const items: Array<number> = [];
  ```
  
  <!--TODO - автору: не хватает описание кода - на что нужно обратить внимание-->
  
instructions: |

  Реализуйте функцию `uniq()`, которая убирает дубликаты из массива. Функция принимает на вход массив чисел и строк. Результатом работы функции должен быть новый массив, в котором сохраняется только первое вхождение каждого элемента. Порядок значений результата определяется порядком их появления в массиве.

  ```typescript
  uniq([9, 9, 3, 8, 8]); // [9, 3, 8]
  uniq(['twinkle', 'twinkle', 'little', 'bat']); // ['twinkle', 'little', 'bat']
  uniq([1, 1, 3, 'oops!']); // [1, 3, 'oops!']
  ```

# tips:
